const { Command } = require("discord.js-commando");
const { RichEmbed } = require('discord.js');

// Import stuff we need for JSON.
const fs = require("fs");
const path = require("path");

// Now this doesn't currently work for anything except squads.
// Which sucks.

// But I'll fix it afterwards.


module.exports = class FixPlacement extends Command {
	constructor(client){
		super(client, {
			name: "fixplacement",
			group: "leaderboards",
			memberName: "fixplacement",
			description: "Fixes incorrectly entered placement info for the current game.",
			examples: ["fixplacement 1 15", "fixplacement 56 0"],
            guildOnly: true,
			args: [
				{
					key: "placement",
					prompt: "what is the correct placement you came in the game?\nDo **not** include suffixes - only type the number.\n\nExample: '1' (without quotation marks).",
					type: "integer",
					parse: text => {
						return text.replace(/\D/g, '')
					},
					validate: num => {
						num = num.replace(/\D/g, '')
						if (num >= 1 && num <= 100) return true;
						return "you have specified an invalid placement!"
					}
				},

				{
					key: "kills",
					prompt: "what is the correct amount of kills you got (as a team)?",
					type: "integer",
					parse: text => {
						return text.replace(/\D/g, '')
					},
					validate: num => {
						num = num.replace(/\D/g, '')
						if (num >= 0 && num <= 100) return true;
						return "you have specified an invalid amount of kills!"
					},
                    default: 0
				},
			]
		})
	}


	async run (msg, args) {
		const { placement, kills }  = args;

		var fileLocation = path.join(__dirname, "../../servers/", msg.guild.id + ".JSON")
		if (!fs.existsSync(fileLocation)){
        fs.writeFileSync( fileLocation, '{"guild": {}}', {encoding: "utf8", flag: "wx" } ) // create the file if it doesn't already exist and write some JSON to it to stop errors.

    }
		var server = JSON.parse(fs.readFileSync(fileLocation, "utf8")); // read the file.
        var serverInfo = server.guild // get the guild info. We need to be able to save 'server' seperately as that contains ALL the data.

		// First, ensure the server has been configured.
		if (Object.keys(serverInfo).length == 0){
			return msg.reply("this server has not been configured. Type -configure first before using this command!")
		}


		if (!(serverInfo.paidVersion)){
			return msg.reply("the placement and scoreboard commands are paid features. Please type -premium for more info.")
		}

		if (!(serverInfo.trackScores)){
			return msg.reply("this scrim is unscored! You can't fix placement info!")
		}


		// Check if there are set "placement" channels:
        if ("placementsChannel" in serverInfo){
            if (serverInfo.placementsChannel.length !== 0){ // there are set channels.
    			if ( !serverInfo.placementsChannel.includes(msg.channel.id)){
    				return msg.reply("you cannot use this command here!")

    			}
    		}
        }

		// Check if there is actually a game going on
		if (serverInfo.currentScrim.length === 0){
			return msg.reply("there is no scrim currently in progress!") // I don't see when this would ever be called. But whatever.
		}

		var typeSolo  = false
		var typeDuo   = false
		var typeSquad = false

        switch ( serverInfo.gameidType ) {
            case "solo":
                typeSolo = true;
                if (serverInfo.soloStructure.length == 0){ // it hasn't been configured.
                    return msg.reply("this server has not been configured for scored solo scrims! Get an admin to run `-setupLeaderboard` to set it up!")
                }
                break;
            case "duo":
                typeDuo = true;
                if (serverInfo.duoStructure.length == 0){ // it hasn't been configured.
                    return msg.reply("this server has not been configured for scored duo scrims! Get an admin to run `-setupLeaderboard` to set it up!")
                }
                break;
            case "squads":
                typeSquad = true;
                if (serverInfo.squadStructure.length == 0){ // it hasn't been configured.
                    return msg.reply("this server has not been configured for scored squad scrims! Get an admin to run `-setupLeaderboard` to set it up!")
                }
                break;
        }

		var team = null
		if (typeSquad){ // squad placements.

			var VC = msg.member.voiceChannel
			if (!(VC == undefined) ){
				var possibleRole = msg.guild.roles.find("name", VC.name)
				if (possibleRole !== null){
					if (msg.member.roles.has(possibleRole.id)){
						team = msg.guild.roles.find("name", VC.name)
					}
				}
			}

			// Check if we actually have a value
			if (team == null){
				team = msg.member.roles.filter(role => !(role.position == 0)) // Get rid of the "@everyone" role which is always at the bottom-most (0) position.
				if (!team){ // Stops errors
					return msg.reply("you do not have a team role! Please get one from the admins before trying to add your Game ID!")
				}

				team = team.sort((a, b) => b.comparePositionTo(a)).last() // Sorts the collection of roles by it's position in the role heriarchy. Then, takes the bottom-most role.
			}

			if (team == null){ // Stops errors
					return msg.reply("you do not have a team role! Please get one from the admins before trying to add your Game ID!")
			}
		}
		else if (typeDuo){ // duo placements
            team = findDuoInfo(serverInfo.duoTeams, msg.member.id)
            if (team == null){
                return msg.reply("you are not in a duo team! Type `-createduo <name>` to create one!")
            }
		}
		else { // solo placements, team value is just their member id.
			team = msg.member
		}




		var currentPlacement = serverInfo.currentScrim.length-1 // the index we want to use.
		var gameInfo = serverInfo.currentScrim[currentPlacement]
		var placementInfo = serverInfo.scrimPlacements[currentPlacement].placements

		// We want to get the gameid of the team. We don't care about how many teams are in a game, we will do that with the leaderboard command.
		var placementGameID = null
		for (var game in gameInfo.games){
            (gameInfo.games[game])
			if (gameInfo.games[game].teams.includes(team.id)){
				placementGameID = gameInfo.games[game].gameID
				break
			}
		}

		if (placementGameID == null){ // they haven't entered a gameID
			return msg.reply("you / your team haven't entered a Game ID! Type -gameid <4 digit code> to enter it.\nAdditionally you / your team haven't entered any placement info using `-placement`!")
				.then(newmsg => {
					setTimeout(() => newmsg.delete(), 20000 )
				})
		}
		else {
			var gamePlacementExists = false
            var fixedGameInfo = null
			for (var i=0; i < placementInfo.length; i++){
                /*
                // Test to make sure they haven't -fixgameid'ed. Add later.
                (placementInfo[i])
                for (var j=0; j < placementInfo[i].teams.length; j++){
                    if (placementInfo[i].teams[j].teamID == team.id){
                        ("yepppppp")
                        if (placementInfo[i].gameID !== placementGameID){ // they have switched.
                            // Remove their value from the previous placement.
                            for (var oldgames=0; oldgames < placementInfo.length; oldgames++){
                                if (placementInfo[i].teams.includes(team.id)){
                                    fixedGameInfo = placementInfo.splice(i, 1)
                                    break
                                }
                            }


                        }
                    }
                }*/

				if (placementInfo[i].gameID == placementGameID){ // they are in this game, we want to add their team values.
					for (var j=0; j < placementInfo[i].teams.length; j++){ // check if they have already entered a placement.
						if (placementInfo[i].teams[j].teamID == team.id){
                            const embed = new RichEmbed()
                    			.setAuthor(this.client.user.username, this.client.user.displayAvatarURL) // set the author to ScrimBot, and the photo it uses.
                    			.setColor(0xFFFFFF)
                    			.setFooter("Created by @Feldma#1776")
                    			.setTitle("Placement information has been updated!")
                                .addField("Updated Information:", "Previous Placement: **" + placementInfo[i].teams[j].placement + "**.\n" +
                                                                  "Previous Kills: **" + placementInfo[i].teams[j].kills + "**.\n" +
                                                                  "New Placement: **" + placement + "**.\n" +
                                                                  "New Kills: **" + kills + "**.")


                                placementInfo[i].teams[j].placement = placement
                                placementInfo[i].teams[j].kills = kills

                            // Remove their data.
                            placementInfo[i].teams.splice(j, 1)
							msg.embed(embed)
                            gamePlacementExists = true
                            break
						}
					}
                }
            }

            if (!gamePlacementExists){
                // If we are at this point, they haven't entered placement info yet.
                return msg.reply("you haven't entered any placement information yet!")
            }
		}

		// Hypothetically at this point we now have modified any of the data we wanted.
		// Because we are using JSON and we are going to be "creating" a new messsage each time then
		// editing it (at least until we change how the placement embed works)


		const embed = new RichEmbed()
			.setAuthor(this.client.user.username, this.client.user.displayAvatarURL) // set the author to ScrimBot, and the photo it uses.
			.setColor(0xFFFFFF)
			.setFooter("Type -placement <position> <kills> and, if required, attach an image! Created by @Feldma#1776.")
			.setTitle("Placements for Game " + serverInfo.currentScrim.length + ":")



			// Let's start adding our data.
			// We already have placementInfo defined
            for (var i=0; i < placementInfo.length; i++){ // for all our gameid's
				var gameIDTeams = []

				for (var j=0; j < placementInfo[i].teams.length; j++){ // for all our teams in our gameid
					var teamInfo
                    (typeSolo)
					if (typeSolo){
						teamInfo = msg.guild.members.get(placementInfo[i].teams[j].teamID) + " - Placement: " + placementInfo[i].teams[j].placement.toString() + ". Kills: " + placementInfo[i].teams[j].kills.toString() + "."
					}
					else if (typeDuo){
                        teamInfo = getDuoInfo(serverInfo.duoTeams, placementInfo[i].teams[j].teamID).name + " - Placement: " + placementInfo[i].teams[j].placement.toString() + ". Kills: " + placementInfo[i].teams[j].kills.toString() + "."
					}
					else{
						teamInfo = msg.guild.roles.get(placementInfo[i].teams[j].teamID) + " - Placement: " + placementInfo[i].teams[j].placement.toString() + ". Kills: " + placementInfo[i].teams[j].kills.toString() + "."
					}
					gameIDTeams.push(teamInfo)
				}
                var sliceIndex = 0
                if ((sliceIndex + 10) > (gameIDTeams.length)){
                    embed.addField("Game ID " + placementInfo[i].gameID + ":", gameIDTeams)
                    sliceIndex += 10
                }
                else{
                    embed.addField("Game ID " + placementInfo[i].gameID + ":", gameIDTeams.slice(sliceIndex, sliceIndex + 10))
                    sliceIndex += 10
                }

                while ((sliceIndex + 10) < (gameIDTeams.length)){
                    embed.addField('\u200B', gameIDTeams.slice(sliceIndex, sliceIndex + 10))
                    sliceIndex += 10
                }

                // We should now have some remaining info probably.
                if (sliceIndex < gameIDTeams.length){
                    embed.addField('\u200B', gameIDTeams.slice(sliceIndex))
                }

			}




			// Finally, edit the embed!
			msg.guild.channels.get(serverInfo.gameidChannel).fetchMessage(serverInfo.placementEmbed)
				.then(msg => { msg.edit(embed)}) // edit the message. fetchMessage is a promise so we have to put it in .then
				.catch(e => {
					(e)
					msg.reply("something went wrong! It appears the placement embed has been deleted. Data will still be saved, but it won't be displayed.")
				})


		fs.writeFile(fileLocation, JSON.stringify(server, null, 2), (err) => {
			if (err){
				console.error(error)
				return msg.reply("failed to fix placement data - an internal file error occured.\nThis *will* result in data loss!\nPlease contact @Feldma#1776.\nERROR:GAMEID1")
			}
		})


	}

}

function findDuoInfo(teamData, id){
    for (var info=0; info < teamData.length; info++){
        if (teamData[info].members.includes(id)){
            return teamData[info]
        }
    }
    // no data found, return null.
    return null
}
function getDuoInfo(teamData, id){
    for (var info=0; info < teamData.length; info++){
        if (teamData[info].id == id){
            return teamData[info]
        }
    }
    return null
}
